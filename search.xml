<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣509.斐波那契数列</title>
      <link href="/2021/05/02/lc509/"/>
      <url>/2021/05/02/lc509/</url>
      
        <content type="html"><![CDATA[<p class="text-danger">© 本文版权归作者Link 所有，转载请注明出处。</p><p class="text-success">LeetCode | 509. 斐波那契数列 Fibonacci number【easy】(Java代码)</p><h2 id="暴力递归法"><a href="#暴力递归法" class="headerlink" title="暴力递归法"></a>暴力递归法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Recursion</span></span><br><span class="line"><span class="comment">Time Complexity: O(2^n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="记忆化递归法"><a href="#记忆化递归法" class="headerlink" title="记忆化递归法"></a>记忆化递归法</h2><h3 id="数组做-Memo-ArrayList"><a href="#数组做-Memo-ArrayList" class="headerlink" title="数组做 Memo - ArrayList"></a>数组做 Memo - ArrayList</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Recursion + Memoization (array)-use java.util.ArrayList</span></span><br><span class="line"><span class="comment">Time Complexity: less than O(2^n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;(n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// prepare: put -1 into empty arr</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt;n+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            arr.add(i, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fibRecursion(arr, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibRecursion</span><span class="params">(ArrayList&lt;Integer&gt; arr, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(arr.get(n) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> arr.get(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">        arr.set(n, sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组做-Memo-Arrays"><a href="#数组做-Memo-Arrays" class="headerlink" title="数组做 Memo - Arrays"></a>数组做 Memo - Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Recursion + Memoization (array)-use java.util.Arrays</span></span><br><span class="line"><span class="comment">Time Complexity: less than O(2^n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span>[] memo = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// prepare: put -1 into this empty array</span></span><br><span class="line">        Arrays.fill(memo, -<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fibRecursion(memo, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fibRecursion</span><span class="params">(<span class="keyword">int</span>[] memo, <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(memo[n] != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> memo[n];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">        memo[n] = sum;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表做-Memo"><a href="#哈希表做-Memo" class="headerlink" title="哈希表做 Memo"></a>哈希表做 Memo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Recursion + Memoization (hashtable)</span></span><br><span class="line"><span class="comment">Time Complexity: less than O(2^n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(n))&#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>);</span><br><span class="line">        map.put(n, sum);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h2><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Dynamic Programing - basic</span></span><br><span class="line"><span class="comment">Time Complexity: O(n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(n);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] f= <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>]= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)&#123;</span><br><span class="line">        f[i] =f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="DP-优化"><a href="#DP-优化" class="headerlink" title="DP 优化"></a>DP 优化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Dynamic Programing - optimize</span></span><br><span class="line"><span class="comment">Time Complexity: O(n);</span></span><br><span class="line"><span class="comment">Space Complexity: O(1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> next = pre + cur;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ol><li><p><a href="https://leetcode-cn.com/problems/fibonacci-number/" target="_blank" rel="noopener">【力扣直通车】509. 斐波那契数列</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1Kv411j7qU" target="_blank" rel="noopener">【BiliBili视频】LeetCode 509. Fibonacci Number | 思路梳理</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms &amp; data structure；Java； </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>something about SQL</title>
      <link href="/2021/04/11/something-about-SQL/"/>
      <url>/2021/04/11/something-about-SQL/</url>
      
        <content type="html"><![CDATA[<p class="text-danger">© 本文版权归作者Link 所有，转载请注明出处。</p><h2 id="SQL运行原理"><a href="#SQL运行原理" class="headerlink" title="SQL运行原理"></a>SQL运行原理</h2><ol><li>准备表格<ol><li>复制源数据进行连接，筛选；<ol><li>FROM</li><li>JOIN：连接表格；</li><li>WHERE：将数据按以下条件筛选；</li></ol></li><li>如果需要聚合运算，则基于连接、筛选好的数据，创建“数据透视表”；<ol><li>GROUP BY：按以下字段和条件<strong>分组</strong>；<ol><li>SQL 中的 GROUP BY 是对数据进行去重合并，为后续聚合运算做准备。要注意：具体的聚合运算还是由聚合函数进行的；</li></ol></li><li>HAVING：在分组后的数据中找到满足以下条件的数据；<ol><li>数据分组后，对<strong>作为分组依据的非聚合字段</strong>和<strong>分组后聚合运算的结果</strong>进行筛选。</li></ol></li></ol></li></ol></li><li>查询字段<ol><li>对准备好的表格进行排序和行数限制；<ol><li>ORDER BY：<ol><li>按照字段的顺序对表格的行进行排序，SQL中默认升序，降序要在字段后加 DESC（descent）；</li></ol></li><li>LIMIT：留下指定行数或指定位置的数据；<ol><li>LIMIT n，则返回前 n 行，如 LIMIT 10，返回前 10 行；</li><li>LIMIT x, y，则从第 x 行后返回 y 行，如 LIMIT 10, 2，则会返回第11和12行；</li><li>常用来取固定名次的数据，或进行数据的初步查看</li></ol></li></ol></li><li>查询表格中的字段，并基于已有的字段进行计算；<ol><li>SELECT</li></ol></li></ol></li><li>处理函数<ol><li>DISTINCT：去重，去重计数 COUNT(DISTINCT xx)；<ol><li>SQL 中的 DISTINCT 实际是删除操作，把重复的都删去；</li></ol></li><li>LIKE、%通配符、_占位符模糊查询；</li><li>聚合函数；</li><li>CASE WHEN 条件判断函数；</li><li>COALESCE()空值处理函数</li><li>OVER()窗口函数； </li></ol></li></ol><h2 id="SQL代码规范"><a href="#SQL代码规范" class="headerlink" title="SQL代码规范"></a>SQL代码规范</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><p>单行注释：–</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col_name <span class="comment">-- 这是一条注释</span></span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>多行注释：/* 注释内容 */</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*SELECT col_name </span></span><br><span class="line"><span class="comment">FROM table_name;*/</span></span><br><span class="line"><span class="keyword">SELECT</span> col_2 </span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他规范"><a href="#其他规范" class="headerlink" title="其他规范"></a>其他规范</h3><ol><li>SQL语句不区分大小写，因此 SELECT 与 select 甚至是 SeLect 的效果是相同的，但是要对命令和变量进行区分，所以默认命令需要大写，其他内容如变量等则需要小写</li><li>表和变量名中不要出现空格，可使用下划线_替代</li><li>查询语句中，使用单一空格隔开命令和变量</li><li>逗号写在字段前面</li><li>注意换行</li><li>核心语句的内容能写在一行尽量写在一行</li><li>WHERE 语句过长时，每个都要换行</li><li>注意缩进：CASE WHEN 同一级别的条件，子查询，别名尽量统一缩进，代码结束处加;</li></ol><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>聚合函数：有时候我们只是需要获取数据的汇总信息，比如行数、平均值，并不需要把所有数据都检索出来。为此，SQL提供了专门的函数，这也是SQL最强大功能之一。</p><p>SQL的聚合函数如下：</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列的和</td></tr></tbody></table><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>重要的是逻辑</p><ol><li>子查询就是将一个查询（子查询）的结果，作为另一个查询（主查询）的<strong>数据来源</strong>或<strong>判断条件</strong>的查询。</li><li>常见的子查询有 WHERE 子查询，FROM 子查询，SELECT 子查询，EXISTS 子查询，子查询要用小括号 ()；<ul><li>【好文详解】<a href="https://www.cnblogs.com/fzxey/p/10896244.html" target="_blank" rel="noopener">SQL中的子查询</a></li></ul></li><li>如果感觉一次查询无法完成，就使用子查询，然后再逐步优化。</li></ol><h2 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h2><p>脑海里一定要有两个具象化的表格</p><p>JOIN</p><ul><li>【好文详解】<a href="https://www.cnblogs.com/reaptomorrow-flydream/p/8145610.html" target="_blank" rel="noopener">SQL的各种连接JOIN详解</a></li></ul><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>插入新记录</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt;(字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br><span class="line"><span class="comment">-- 添加一条新记录</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> world(<span class="keyword">name</span>, continent, population) <span class="keyword">VALUES</span>(<span class="string">'New York'</span>, <span class="string">'Asia'</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">-- 查询看看</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> world;</span><br></pre></td></tr></table></figure><p>可以一次性添加多条记录，只需要在 VALUE 子句中指定多个记录值，每个记录值是由 (…) 包含的一组值。</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611138358240" target="_blank" rel="noopener">廖雪峰：SQL教程-INSERT</a></li></ul><h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>更新已有记录</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt; <span class="keyword">SET</span> 字段<span class="number">1</span>=值<span class="number">1</span>, 字段<span class="number">2</span>=值<span class="number">2</span>, ... <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="comment">-- 更新 id=1 的记录</span></span><br><span class="line"><span class="keyword">UPDATE</span> world <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'New York'</span>, continent = <span class="string">'Asia'</span>, population = <span class="number">1000</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 查询看看</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> world </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>可以一次性更新多条记录，通过 WHERE 条件。</p><p>更新字段可以用表达式，比如亚洲的国家人口都加一百万（6个0）。</p><p>注意：UPDATE 语句中如果没有 WHERE 条件，那么，整个表的所有记录都会更新。</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611161425120" target="_blank" rel="noopener">廖雪峰：SQL教程-UPDATE</a></li></ul><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>删除已有记录</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> ...;</span><br><span class="line"><span class="comment">-- 删除 id=1 的记录</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> world <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 查询看看</span></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line"><span class="keyword">FROM</span> world </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>可以一次性删除多条记录，通过 WHERE 条件。</p><p>注意：DELETE 语句中如果没有 WHERE 条件，那么，整个表的所有记录都会被删除。</p><ul><li><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611171910432" target="_blank" rel="noopener">廖雪峰：SQL教程-DELETE</a></li></ul><h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ol><li><a href="https://mubu.com/doc/4BHMMbbvIMb" target="_blank" rel="noopener">戴师兄3天SQL入门教程刷题链接</a></li><li><a href="https://mubu.com/doc/uf3vg8s5ar" target="_blank" rel="noopener">元旦3天SQL特训营</a></li><li><a href="https://mubu.com/doc/eGQ0OKyH2w" target="_blank" rel="noopener">SQL学习总结</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣4.寻找两个正序数组的中位数</title>
      <link href="/2021/04/05/lc4/"/>
      <url>/2021/04/05/lc4/</url>
      
        <content type="html"><![CDATA[<p class="text-danger">© 本文版权归作者Link 所有，转载请注明出处。</p><p class="text-success">LeetCode | 4. 寻找两个正序数组的中位数 Median of Two Sorted Arrays 【hard】(Java代码)</p><h2 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Binary Search</span></span><br><span class="line"><span class="comment">    n is the size of numsA;</span></span><br><span class="line"><span class="comment">    m is the size of numsB;</span></span><br><span class="line"><span class="comment">    Time Complexity: O(log(min(n, m)));</span></span><br><span class="line"><span class="comment">    Space Complexity: O(1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] numsA, <span class="keyword">int</span>[] numsB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = numsA.length;</span><br><span class="line">        <span class="keyword">int</span> m = numsB.length;</span><br><span class="line">        <span class="keyword">int</span> mn = n + m;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> findMedianSortedArrays(numsB, numsA);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ((<span class="keyword">double</span>)numsB[(m-<span class="number">1</span>)/<span class="number">2</span>] + (<span class="keyword">double</span>)numsB[m/<span class="number">2</span>])/<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>; </span><br><span class="line">        <span class="keyword">int</span> j = n;</span><br><span class="line">        <span class="keyword">int</span> cutA = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cutB = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(i &lt;= j)&#123;</span><br><span class="line">            cutA = (i + j) / <span class="number">2</span>;</span><br><span class="line">            cutB = (mn + <span class="number">1</span>) / <span class="number">2</span> - cutA;</span><br><span class="line">            <span class="keyword">int</span> al = (cutA == <span class="number">0</span>)? Integer.MIN_VALUE: numsA[cutA-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> ar = (cutA == n)? Integer.MAX_VALUE: numsA[cutA];</span><br><span class="line">            <span class="keyword">int</span> bl = (cutB == <span class="number">0</span>)? Integer.MIN_VALUE: numsB[cutB-<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> br = (cutB == m)? Integer.MAX_VALUE: numsB[cutB];</span><br><span class="line">            <span class="keyword">if</span>(al&gt;br)&#123;</span><br><span class="line">                j = cutA - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(bl&gt;ar)&#123;</span><br><span class="line">                i = cutA + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>((mn &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> (Math.max(al, bl) + Math.min(ar, br))/<span class="number">2.0</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Math.max(al, bl);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">iterate</span></span><br><span class="line"><span class="comment">  n is the size of numsA;</span></span><br><span class="line"><span class="comment">  m is the size of numsB;</span></span><br><span class="line"><span class="comment">  Time Complexity: O(n+m));</span></span><br><span class="line"><span class="comment">  Space Complexity: O(1);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>[] numsA, <span class="keyword">int</span>[] numsB)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = numsA.length;</span><br><span class="line">        <span class="keyword">int</span> m = numsB.length;</span><br><span class="line">        <span class="keyword">int</span> mn = n + m;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// l: the element on the neutrality line left side,</span></span><br><span class="line">        <span class="comment">// r: the element on the neutrality line right side;</span></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aP：the pointer that iterates numsA,</span></span><br><span class="line">        <span class="comment">// bP：the pointer that iterates numsB;</span></span><br><span class="line">        <span class="keyword">int</span> aP = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> bP = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i&lt;= mn/<span class="number">2</span> ; i++)&#123;</span><br><span class="line">            l = r;</span><br><span class="line">            <span class="keyword">if</span>(aP&lt;n &amp;&amp; (bP &gt;= m || numsA[aP] &lt; numsB[bP]))&#123;</span><br><span class="line">                r = numsA[aP++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                r = numsB[bP++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>((mn &amp; <span class="number">1</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (l+r)/<span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="传送门"><a href="#传送门" class="headerlink" title="传送门"></a>传送门</h2><ol><li><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">【做题直通车】leetcode 4：寻找两个正序数组的中位数</a></p></li><li><p><a href="https://www.bilibili.com/video/BV1ti4y1N7iP" target="_blank" rel="noopener">【BiliBili视频】leetcode 4 | 思路梳理</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithms &amp; data structure; Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git设置ssh密钥</title>
      <link href="/2020/06/22/setting-ssh-key/"/>
      <url>/2020/06/22/setting-ssh-key/</url>
      
        <content type="html"><![CDATA[<p class="text-danger">© 本文版权归作者Link 所有，若转载请注明出处，谢谢！</p><hr><p>git 支持 https 和 git 两种传输协议：</p><ul><li>https 协议，每次pull, push都会提示要输入密码；</li><li>git 协议，然后使用 ssh 密钥，这样免去每次都输密码的麻烦。</li></ul><p>初次使用 git 的用户要使用 git 协议大概需要三个步骤：</p><ol><li>生成密钥对</li><li>设置远程仓库（本文以github为例）上的公钥</li><li>把git的 remote url 修改为git协议</li></ol><h2 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h2><p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。</p><p>首先你要确认一下本机是否已经有一个公钥。</p><ul><li>SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br><span class="line">$ ls <span class="comment"># 列出当前目录下的所有文件和目录</span></span><br><span class="line">id_rsa   known_hosts   id_rsa.pub</span><br></pre></td></tr></table></figure><p>看一下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>(或者是<code>id_dsa</code>和<code>id_dsa.pub</code>之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p><ul><li>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 <code>ssh-keygen</code>来创建新的ssh key：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br><span class="line"></span><br><span class="line">Creates a new ssh key using the provided email </span><br><span class="line"><span class="comment"># Generating public/private rsa key pair.</span></span><br><span class="line"></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>按Enter。</p><p>然后，会提示你输入密码，如下：</p><p>(输一个，会安全一点，但是之后每次pull, push都会要求输入这个密码；若不输入，直接回车，就少了一点安全，但是省去了麻烦)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><p>完成之后，大概是这样显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.</span><br><span class="line">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure><p>到此为止，本地的密钥对就生成了。</p><h2 id="添加公钥到你的远程仓库（github）"><a href="#添加公钥到你的远程仓库（github）" class="headerlink" title="添加公钥到你的远程仓库（github）"></a>添加公钥到你的远程仓库（github）</h2><ol><li>查看刚刚生成的公钥：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 显示文件中的内容</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>登陆GitHub帐户, user settings <code>-&gt;</code> SSH and GPG keys <code>-&gt;</code> New SSH key</p></li><li><p>然后复制上面的公钥内容，粘贴进 Key 文本域内。 title 域，自己随便起个名字。</p></li><li><p>Add key。</p></li></ol><p>验证下这个key是不是正常工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Attempts to ssh to github</span><br></pre></td></tr></table></figure><p>如果，看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not # provide shell access.</span></span><br></pre></td></tr></table></figure><p>说明设置成功了。</p><h2 id="修改git的remote-url"><a href="#修改git的remote-url" class="headerlink" title="修改git的remote url"></a>修改git的remote url</h2><p>使用命令 <code>git remote -v</code>查看你当前的 remote url：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/someaccount/someproject.git (fetch)</span><br><span class="line">origin https://github.com/someaccount/someproject.git (push)</span><br></pre></td></tr></table></figure><p>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p><ul><li>你可以登陆GitHub，在上面可以看到ssh协议相应的url，复制此ssh链接，然后使用命令<code>git remote set-url</code>来调整url：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin git@github.com:someaccount/someproject.git</span><br></pre></td></tr></table></figure><p>然后你可以再用命令 <code>git remote -v</code> 查看一下，url是否已经变成了ssh地址。</p><p>the end.</p><h2 id="更多链接"><a href="#更多链接" class="headerlink" title="更多链接"></a>更多链接</h2><ol><li><p><a href="https://blog.csdn.net/xiaomengzi_16/article/details/98847298" target="_blank" rel="noopener">git配置公匙时不必输入密码</a> </p><p>csdn的一篇文章，详细风趣地讲解了一个我曾犯过的错误。</p></li><li><p><a href="https://www.cnblogs.com/superGG1990/p/6844952.html" target="_blank" rel="noopener">git如何使用ssh密钥</a> </p><p>博客园 <a href="https://home.cnblogs.com/u/superGG1990/" target="_blank" rel="noopener">superGG1990</a> 的一篇文章，是一个很好的 walkthrough，我的这篇文章就是基于此文写的一个 summary。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床的使用</title>
      <link href="/2020/06/18/picbed/"/>
      <url>/2020/06/18/picbed/</url>
      
        <content type="html"><![CDATA[<p class="text-danger">© 本文版权归作者Link 所有，若转载请注明出处，谢谢！</p><p>在Typora中利用PicGo自动上传图片到SM.MS图床。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li><p>install <code>Typora</code>，<code>PicGo</code>，<code>Git</code>，<code>Node.js</code></p><span class="label label-info">Typora</span><span class="label label-primary">PicGo</span><span class="label label-warning">Git</span><span class="label label-danger">Node.js</span></li><li><p>register <code>sm.ms</code></p></li><li><p>PicGo 安装 sm.ms 插件</p><ul><li><p>app 中<code>插件设置</code>搜索 <code>smms-user</code>，安装即可</p></li><li><p>picgo 的官方文档写得易懂详细，推荐阅读（<a href="https://picgo.github.io/PicGo-Doc/zh/guide" target="_blank" rel="noopener">PicGo-Doc</a>）。</p></li></ul></li></ol><h2 id="PicGo-amp-SM-MS"><a href="#PicGo-amp-SM-MS" class="headerlink" title="PicGo &amp; SM.MS"></a>PicGo &amp; SM.MS</h2><p>目的是把图床（SM.MS）的 API Access 给 PicGo。</p><ul><li><p>SM.MS中：</p><p>​    –&gt;<code>dashboard</code></p><p>​    –&gt;<code>API Token</code> </p><p>​    click <code>Generate Secret Token</code></p><p>​    copy <code>Secret Token</code></p></li><li><p>PicGo中：</p><p>​    –&gt;<code>图床设置</code></p><p>​    –&gt;<code>SM.MS - 登录用户</code></p><p>​    将 <code>Secret Token</code> 输入 <code>Auth</code>框内</p></li></ul><h2 id="PicGo-amp-Typora"><a href="#PicGo-amp-Typora" class="headerlink" title="PicGo &amp; Typora"></a>PicGo &amp; Typora</h2><p>目的是实现Typora中图片自动地通过 PicGo 上传到图床（SM.MS）。</p><ul><li><p>Typora 中：</p><p>​    –&gt;<code>文件</code> –&gt;<code>偏好设置</code> –&gt;<code>图像</code></p><p>​    图像中各种设置的说明易懂，按需勾选即可。</p><p>   click <code>验证图片上传选项</code></p><p>​    会弹出下图：（现在可能不会成功上传，但现在不要紧）</p></li></ul><img src="https://i.loli.net/2020/06/19/Gc93a52B6XbDxPL.png" alt="111" style="zoom: 67%;" /><p>​        copy 端口号。</p><ul><li><p>PicGo 中：</p><p>​    –&gt;<code>PicGo 设置</code> –&gt;<code>设置 Server</code></p><p>​    输入刚刚 copy 的端口号。</p></li></ul><p>这时 Typora 中进行验证图片上传，就会成功，说明现在Typora中图片可以自动地通过 PicGo 上传到图床（SM.MS）了！</p><p>可以拖一张图片到 Typora 中试验一下。</p><h2 id="PicGo-快捷键"><a href="#PicGo-快捷键" class="headerlink" title="PicGo 快捷键"></a>PicGo 快捷键</h2><ul><li><p>PicGo 支持快捷键<code>command+shift+p</code>（macOS）或者<code>control+shift+p</code>（windows\linux）用以支持快捷上传剪贴板里的图片（第一张）。</p></li><li><p>支持自定义快捷键。</p></li><li><p>每次截图之后，按一下<code>ctrl+shift+p</code>，截图就可以直接上传到sm.ms图床上，并返回链接。</p></li></ul><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><ol><li><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide" target="_blank" rel="noopener">PicGo-Doc</a></p></li><li><p><a href="https://www.jianshu.com/p/4cd14d4ceb1d" target="_blank" rel="noopener">简书 各种错误排查</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git向导</title>
      <link href="/2020/06/16/git-guide/"/>
      <url>/2020/06/16/git-guide/</url>
      
        <content type="html"><![CDATA[<h3 id="intro-to-Git"><a href="#intro-to-Git" class="headerlink" title="intro to Git"></a>intro to Git</h3><p>What is Git?</p><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>是一个分布式版本控制系统（<a href="https://en.wikipedia.org/wiki/Distributed_version_control" target="_blank" rel="noopener">Distributed Version Control System</a>）</p><ul><li><p>客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。</p></li><li><p>特点：</p><ul><li>直接记录快照，而非差异比较；</li><li>近乎所有操作都是本地执行；</li><li>Git 保证完整性；</li><li>Git 一般只添加数据；</li></ul></li><li><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">关系图示</a></p><p>An image from ruanyifeng’s blog is placed here for your convenience:</p></li></ul><p>Git has excellent <a href="http://git-scm.com/documentation" target="_blank" rel="noopener">documentation</a> so we highly encourage those who are interested to read more about what will be summarized in the rest of this guide.</p><hr><h3 id="Local-Repositories-Overview"><a href="#Local-Repositories-Overview" class="headerlink" title="Local Repositories  (Overview)"></a>Local Repositories  (Overview)</h3><h4 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h4><p>三种状态：</p><ul><li><p>Git 有三种状态，你的文件可能处于其中之一：</p><ul><li><code>modified</code>：表示修改了文件，但还没保存到数据库中。</li><li><code>staged</code>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li><code>committed</code>：表示数据已经安全地保存在本地数据库中。</li></ul></li></ul><p>This leads us to the three main sections of a Git project： the working tree, the staging area, and the<br>Git directory.</p><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件。</li><li>将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。</li></ol><h4 id="Git-Setup"><a href="#Git-Setup" class="headerlink" title="Git Setup"></a>Git Setup</h4><ol><li><p>Your Identity</p><p>设置你的用户名和邮件地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config [--global] user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"johndoe@example.com"</span></span><br></pre></td></tr></table></figure><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p></li><li><p>Checking Your Settings</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有 Git 当时能找到的配置</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure></li></ol><h4 id="get-a-Git-Repository"><a href="#get-a-Git-Repository" class="headerlink" title="get a Git Repository"></a>get a Git Repository</h4><p>通常有两种获取 Git 项目仓库的方式：</p><ol><li>将尚未进行版本控制的本地目录转换为 Git 仓库；</li><li>从其它服务器 <strong>克隆</strong> 一个已存在的 Git 仓库。</li></ol><hr><ol><li><p>Initializing a Repository in an Existing Directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /c/user/my_project</span><br></pre></td></tr></table></figure><p>在当前目录新建一个Git代码库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></li><li><p>Cloning an Existing Repository</p><ul><li>Git 克隆的是该 Git 仓库服务器上的几乎所有数据，而不是仅仅复制完成你的工作所需要文件。</li></ul><p>克隆仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2</span><br></pre></td></tr></table></figure><p>这会在当前目录下创建一个名为 “libgit2” 的目录，并在这个目录下初始化一个 <code>.git</code> 文件夹， 从远程仓库拉取下所有数据放入 <code>.git</code> 文件夹，然后从中读取最新版本的文件的拷贝。 </p><p>如果你想在克隆远程仓库的时候，自定义本地仓库的名字，你可以通过额外的参数指定新的目录名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit</span><br></pre></td></tr></table></figure><p>这会执行与上一条命令相同的操作，但目标目录名变为了 <code>mylibgit</code>。</p></li></ol><h4 id="Tracked-vs-Untracked-Files"><a href="#Tracked-vs-Untracked-Files" class="headerlink" title="Tracked vs. Untracked Files"></a>Tracked vs. Untracked Files</h4><p>The Git documentation has an excellent section on <a href="http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository" target="_blank" rel="noopener">recording changes</a>. An image from that section is placed here for your convenience:</p><ul><li>如上图所示，你工作目录下的每一个文件都不外乎这两种状态：<strong>tracked</strong> 或 <strong>untracked</strong>。 </li></ul><p>The following Git command allows you see the status of each file, i.e. whether it is untracked, unmodified, modified, or stageds:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h4 id="Staging-amp-Committing"><a href="#Staging-amp-Committing" class="headerlink" title="Staging &amp; Committing"></a>Staging &amp; Committing</h4><p>A <em>commit</em> is a specific snapshot of your working directory at a particular time. Users must specify what exactly composes the snapshot by <em>staging</em> files.</p><p>The <code>add</code> command lets you stage a file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br></pre></td></tr></table></figure><p><code>git add</code> 命令使用文件或目录的路径作为参数；</p><ul><li>如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。</li></ul><p>Once you have staged all the files you would like to include in your snapshot, you can commit them as one block with a message.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m MESSAGE</span><br></pre></td></tr></table></figure><p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。</p><p> you can use the log command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>The Git reference guide has a helpful section on <a href="http://git-scm.com/book/en/Git-Basics-Viewing-the-Commit-History" target="_blank" rel="noopener">viewing commit history</a> and filtering log results when searching for particular commits. It might also be worth checking out <code>gitk</code>, which is a GUI prompted by the command line.</p><h4 id="Undoing-Changes"><a href="#Undoing-Changes" class="headerlink" title="Undoing Changes"></a>Undoing Changes</h4><p>The Git reference has a great section on <a href="http://git-scm.com/book/en/Git-Basics-Undoing-Things" target="_blank" rel="noopener">undoing things</a>. Please note that while Git revolves around the concept of history, it is possible to lose your work if you revert with some of these undo commands. Thus, be careful and read about the effects of your changes before undoing your work.</p><ul><li>Unstage a file that you haven’t yet committed:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD [file]</span><br></pre></td></tr></table></figure><p>This will take the file’s status back to modified, leaving changes intact. Don’t worry about this command undoing any work. This command is the equivalent of deleting one of the temporary images that you’re going to combine into a panorama.</p><p>Why might we need to use this command? Let’s say you accidentally started tracking a file that you didn’t want to track. (an embarrassing video of yourself, for instance.) Or you were made some changes to a file that you thought you would commit but no longer want to commit quite yet.</p><ul><li>Amend latest commit (changing commit message or add forgotten files):</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add [forgotten-file]</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><p>Please note that this new amended commit will replace the previous commit.</p><ul><li>Revert a file to its state at the time of the most recent commit:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- [file]</span><br></pre></td></tr></table></figure><p>This next command is useful if you would like to actually undo your work. Let’s say that you have modified a certain <code>file</code> since committing previously, but you would like your file back to how it was before your modifications.</p><hr><h3 id="Remote-Repositories"><a href="#Remote-Repositories" class="headerlink" title="Remote Repositories"></a>Remote Repositories</h3><h4 id="Adding-Remotes"><a href="#Adding-Remotes" class="headerlink" title="Adding Remotes"></a>Adding Remotes</h4><p>Adding a remote repository means that you are telling git where the repo is located. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add [short-name] [remote-url]</span><br></pre></td></tr></table></figure><p>The remote URL will look something like <code>https://github.com/berkeley-cs61b/skeleton.git</code> if you are using HTTP or <code>git@github.com:berkeley-cs61b/skeleton.git</code> if you are using SSH.</p><p>By convention, the name of the primary remote is called <code>origin</code> (for original remote repository). So either of the following two commands would allow me to add the <code>berkeley-cs61b/skeleton</code> repository as a remote.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/berkeley-cs61b/skeleton.git</span><br><span class="line">$ git remote add origin git@github.com:berkeley-cs61b/skeleton.git</span><br></pre></td></tr></table></figure><p>After adding a remote, all other commands use its associated short name.</p><h4 id="Renaming-Deleting-amp-Listing-Remotes"><a href="#Renaming-Deleting-amp-Listing-Remotes" class="headerlink" title="Renaming, Deleting, &amp; Listing Remotes"></a>Renaming, Deleting, &amp; Listing Remotes</h4><ul><li><p>You can rename your remote by using this command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rename [old-name] [new-name]</span><br></pre></td></tr></table></figure></li><li><p>You can also remove a remote if you are no longer using it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote rm [remote-name]</span><br></pre></td></tr></table></figure></li><li><p>To see what remotes you have, you can list them. The <code>-v</code> flag tells you the URL of each remote (not just its name).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></li></ul><p>You can read more about <a href="http://git-scm.com/book/en/Git-Basics-Working-with-Remotes" target="_blank" rel="noopener">working with remotes</a> in the Pro Git book.</p><h4 id="Cloning-a-Remote"><a href="#Cloning-a-Remote" class="headerlink" title="Cloning a Remote"></a>Cloning a Remote</h4><p>There are often remote repos with code that you would like to copy to your own computer. In these cases, you can easily download the entire repo with its commit history by cloning the remote:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> [remote-url]</span><br><span class="line">$ git <span class="built_in">clone</span> [remote-url] [directory-name]</span><br></pre></td></tr></table></figure><p>The top command will create a directory of the same name as the remote repo. The second command allows you to specify a different name for the copied repository.</p><p>When you clone a remote, the cloned remote because associated with your local repo by the name <code>origin</code>. This is by default because the cloned remote was the <code>origin</code> for your local repo.</p><h4 id="Pushing-Commits"><a href="#Pushing-Commits" class="headerlink" title="Pushing Commits"></a>Pushing Commits</h4><p>You may wish to update the contents of a remote repo by adding some commits that you made locally. You can do this by <code>pushing</code> your commits:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [remote-name] [remote-branch]</span><br></pre></td></tr></table></figure><p>Note that you will be pushing to the remote branch from the branch your <code>HEAD</code> pointer is currently referencing. For example, let’s say that I cloned a repo then made some changes on the <code>master</code> branch. I can give the remote my local changes with this command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h4 id="Fetching-amp-Pulling-Commits"><a href="#Fetching-amp-Pulling-Commits" class="headerlink" title="Fetching &amp; Pulling Commits"></a>Fetching &amp; Pulling Commits</h4><p>There are also times that you’d like to get some new commits from a remote that are not currently on your local repo. For example, you may have cloned a remote created by a partner and wish to get his/her newest changes. You can get those changes by fetching or pulling from the remote.</p><ul><li><p><code>fetch</code>: This is analogous to downloading the commits. It does not incorporate them into your own code.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch [remote-name]</span><br></pre></td></tr></table></figure><p>Why might you use this? Your partner may have created some changes that you’d like to review but keep separate from your own code. Fetching the changes will only update your local copy of the remote code but not merge the changes into your own code.</p><p>For a more particular example, let’s say that your partner creates a new branch on the remote called <code>fixing-ai-heuristics</code>. You can view that branch’s commits with the following steps:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">$ git branch review-ai-fix origin/fixing-ai-heuristics</span><br><span class="line">$ git checkout review-ai-fix</span><br></pre></td></tr></table></figure><p>The second command creates a new branch called <code>review-ai-fix</code> that <em>tracks</em> the <code>fixing-ai-heuristics</code> branch on the <code>origin</code> remote.</p></li><li><p><code>pull</code>: This is equivalent to a <code>fetch + merge</code>. Not only will <code>pull</code> fetch the most recent changes, it will also merge the changes into your <code>HEAD</code> branch.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull [remote-name] [remote-branch-name]</span><br></pre></td></tr></table></figure><p>Let’s say that my boss partner has pushed some commits to the <code>master</code> branch of our shared remote that fix our AI heuristics. I happen to know that it won’t break my code, so I can just pull it and merge it into my own code right away.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="Extra-Reading"><a href="#Extra-Reading" class="headerlink" title="Extra Reading"></a>Extra Reading</h3><ol><li><a href="http://git-scm.com/doc" target="_blank" rel="noopener">Git Documentation</a> is really quite good and clear, and there is a great Pro Git book by Scott Chacon.</li><li><a href="http://wildlyinaccurate.com/a-hackers-guide-to-git" target="_blank" rel="noopener">Hacker’s Guide to Git</a> is a very friendly introduction to how Git works. It gives a peek at the structure of commits &amp; branches and explains how some commands work.</li><li><a href="http://www-cs-students.stanford.edu/~blynn/gitmagic/" target="_blank" rel="noopener">Git Magic</a> is a fun and useful turtorial.</li><li><a href="https://sp19.datastructur.es/materials/guides/using-git.html" target="_blank" rel="noopener">Using Git Guide</a> is very good and friendly to beginners, and written by Sarah Kim. <ul><li>本文其实是这篇文章的总结归纳。</li></ul></li><li><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂的GIT入门</a>：寓教于乐。</li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">Git教程</a>：廖雪峰老师的Git教学。</li><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">Git cheat sheet</a>：阮一峰老师总结的常用Git命令清单，非常实用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> wiki </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/14/hello-world/"/>
      <url>/2020/06/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
