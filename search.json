[{"title":"Git 向导","date":"2021-05-04T21:40:14.000Z","url":"/2021/05/05/git-guide/","tags":[["Git","/tags/Git/"]],"categories":[["Git","/categories/Git/"]],"content":"© 本文版权归作者Link 所有，转载请注明出处。 Git 是什么？Git 是一个分布式版本控制系统（Distributed Version Control System），客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 四个特点： 直接记录快照，而非差异比较； 近乎所有操作都是本地执行； Git 保证完整性； Git 一般只添加数据； Git 的工作流程 （Git - Workflow 来源：阮一峰的网络日志） 专业名词基本的 Git 工作流程： 在工作区（Workspace）中修改文件； 将更改选择性暂存至暂存区（Staging area/ Index）； 提交暂存区的内容到本地仓库（Repository）； Git 的三种状态，文件可能处于其一，假设这个文件是README.md，那么它为： modified：修改了文件，但修改仅在工作区； staged：将工作区已修改的文件放到了暂存区； committed：文件已经安全地保存到本地仓库。 配置 设置提交代码时的用户信息： 检查设定： 配置文件的路径： 本地仓库配置对应的配置文件路径 [–local] ： 用户全局配置对应的配置文件路径 [–global] ： 系统配置对应的配置文件路径[–system]： 新建代码库From existing data From existing repository注意：Git 克隆的是远程 Git 仓库的几乎所有数据，不仅仅是最新的版本。 本地变动 – git status列出哪些文件已被暂存、未被暂存、未被跟踪，即查看工作目录下的文件处于什么状态： 添加指定文件到暂存区，即将该文件放到暂存区（new file）： 也可以用上面的这条指令来暂存已被跟踪文件的最新修改（modified）； 如果对暂存后的文件再次进行修改，之后查询文件状态，那么这时，这个文件将会同时出现在 staging area 和 workspace，因为最新的修改还在工作区，没有暂存，而之前 git add 的版本被暂存了，如果这时提交，那么本地仓库的版本将会是最后一次 git add 的版本，不包含 workspace 中最新的修改。 本地变动 – git diff列出追踪但尚未暂存的文件更新了哪些部分，即工作区和暂存区的差异： 注意：git diff 不能显示自从上次提交的所有变化，它只能显示尚未暂存的变化。如果已经把所有修改的内容都暂存了，那么 git diff 不会有任何反馈。 列出已经暂存，但是没有提交到本地仓库的变化，即暂存区和上一个 commit 的差异： 列出工作区和上一个 commit 的差异（当前分支最新commit）： 列出两次 commit 之间的差异： 本地变动 – git add添加当前目录的所有文件到暂存区： 注意：如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。 对于同一个文件的多处变化，可以实现分次提交： 可以更好地利用 git commit 的注释功能，使仓库的版本颗粒度更高，可读性更好。 参考： stack overflow：Commit only part of a file in Git Git docs：git-add manpage 本地变动 – git rm删除工作区文件，并且将这次删除放入暂存区： 停止追踪指定文件，但该文件会保留在工作区： 比如删除添加.gitignore文件前错误提交的文件。 本地变动 – git mv移动文件，并将这个移动放入暂存区（也可以理解为文件改名）： 参考： Git docs：git-mv manpage 提交到本地仓库 – git commit提交暂存区到本地仓库： 也可以指定暂存区的文件提交到本地仓库，只要在 commit 后面指定 file。 跳过暂存区，直接将工作区自上次 commit 之后的变化，提交到本地仓库： 使用一次新的 commit，替代上一次提交： 重做上一次 commit，并包括指定文件的新变化： 参考： Git docs：git-commit manpage 提交到本地仓库 – git log列出当前分支的版本历史： 仅列出包含指定文件修改的 commit： 限制 log 的显示数量： 列出所有提交，每行显示一条 commit（仅显示提交的 hash 和 message）： 按提交者名字搜索并显示 commit： 按指定内容搜索并显示 commit： 显示图形化的 branch 信息： 参考： Git docs：git-log manpage 提交到本地仓库 – git reflog列出本地仓库的所有 commit： 提交到本地仓库 – git blame列出指定文件是什么人在什么时间修改过： 也可以具体查文档内部某一部分是谁修改： 参考： Git docs：git-blame manpage 远程仓库 – 拉取到本地拉取远程仓库的所有变动到本地，但不合并： 拉取远程仓库特定分支的更新到本地，不合并： 拉取远程仓库的所有变动到本地，之后自动与 HEAD 版本合并： 拉取远程仓库的所有变动到本地，并以 rebase 模式并入本地仓库： 列出当前配置的所有远程端： 如果远程仓库不止一个，那么就会全部列出，比如和多个协作者合作的，这样可以非常方便地拉取其他用户的贡献，还拥有向他们推送的权限。 显示某个远程端的信息： 增加一个新的远程仓库，并指定简写： 远程仓库 – 推送到远程上传本地指定分支到远程仓库： 注意：只有当有推送到该远程仓库的权限，及之前没有人推送过时，该命令才有效。如果有他人先推送到上游，那么，此时的推送命令就会被拒绝，必须先抓取他们的工作并将其合并到本地仓库，才能推送。 参考： Git book：remote branches 分支 – git branch列出本地仓库的所有分支： 列出所有远程分支： 列出所有本地分支和远程分支： 新建一个分支，但依然停留在当前分支： 新建一个分支，并切换到该分支： 新建一个分支，指向指定 commit： 新建一个分支，与指定的远程分支建立追踪关系： 建立追踪关系，在现有分支与指定的远程分支之间： 切换到指定分支，并更新工作区： 切换到上一个分支： 合并指定分支到当前分支： 选择一个 commit，合并进当前分支： 删除分支： 若该分支的修改尚未合并，那么用 -D 参数来强制删除分支，注意，该操作会丢失未合并的修改。 删除远程分支： 分支 – git rebase基于 base 对当前分支进行 rebase。base 可以是 commit、分支名称、tag 或者相对于 HEAD 的 commit。 参考： Git docs：git-rebase manpage B站视频：git-rebase 图解 回滚 – git revert新建一个 commit，用来撤销指定 commit，并且应用到当前分支： 回滚 – git checkout恢复暂存区的指定文件到工作区： 恢复某个 commit 的指定文件到暂存区和工作区： 恢复暂存区的所有文件到工作区： 回滚 – git reset重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变，即撤销这个文件上次的 git add： 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变： 重置暂存区与工作区，与上一次 commit 保持一致： 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致： 重置当前HEAD为指定 commit，但保持暂存区和工作区不变： 暂时将未提交的变化移除，稍后再移入： 回滚 – 具体场景 场景1. 已经提交内容到本地仓库 如何回滚？ 场景2. 修改了还未提交到暂存区 怎么撤销？ 补充： 一种是该文件自修改后还没有放到暂存区，那么，现在撤销修改，就是回到和版本库一模一样的状态； 另一种是该文件添加到暂存区后，又做了修改，那么现在撤销修改，就是回到添加到暂存区后的状态； 场景3. 提交到暂存区，但还未提交到本地仓库 怎么办？ 把暂存区的修改撤销（unstage），重新放回工作区。 所以， git reset既可以回退版本，也可以把暂存区的修改回退到工作区。 之后，丢弃工作区的修改即可。 标签列出所有标签： 给当前版本打标签： 给指定 commit 打标签： 删除本地标签： 删除远程标签： 提交指定标签： 提交所有标签： 新建一个分支，指向某个标签： Git 的 GUI 工具SourceTreeSourceTree 官网 IntelliJ IDEA 中的 GitIntelliJ IDEA 官方文档 相关链接 Pro Git book by Scott Chacon and Ben Straub. The book is available online for free at git-scm.com/book. 常用 Git 命令清单：阮一峰的网络日志. Git Cheat Sheet: made by Hylke Bons. Git Cheat Sheet 中文版: translated by Gevin. "},{"title":"力扣509.斐波那契数列","date":"2021-05-01T16:47:48.000Z","url":"/2021/05/02/lc509/","tags":[["algorithms & data structure；Java；","/tags/algorithms-data-structure%EF%BC%9BJava%EF%BC%9B/"]],"categories":[["LeetCode","/categories/LeetCode/"]],"content":"© 本文版权归作者Link 所有，转载请注明出处。 LeetCode | 509. 斐波那契数列 Fibonacci number【easy】(Java代码) 暴力递归法 记忆化递归法数组做 Memo - ArrayList 数组做 Memo - Arrays 哈希表做 Memo 动态规划法DP DP 优化 传送门 【力扣直通车】509. 斐波那契数列 【BiliBili视频】LeetCode 509. Fibonacci Number | 思路梳理 "},{"title":"something about SQL","date":"2021-04-10T16:37:24.000Z","url":"/2021/04/11/something-about-SQL/","categories":[["SQL","/categories/SQL/"]],"content":"© 本文版权归作者Link 所有，转载请注明出处。 SQL运行原理 准备表格 复制源数据进行连接，筛选； FROM JOIN：连接表格； WHERE：将数据按以下条件筛选； 如果需要聚合运算，则基于连接、筛选好的数据，创建“数据透视表”； GROUP BY：按以下字段和条件分组； SQL 中的 GROUP BY 是对数据进行去重合并，为后续聚合运算做准备。要注意：具体的聚合运算还是由聚合函数进行的； HAVING：在分组后的数据中找到满足以下条件的数据； 数据分组后，对作为分组依据的非聚合字段和分组后聚合运算的结果进行筛选。 查询字段 对准备好的表格进行排序和行数限制； ORDER BY： 按照字段的顺序对表格的行进行排序，SQL中默认升序，降序要在字段后加 DESC（descent）； LIMIT：留下指定行数或指定位置的数据； LIMIT n，则返回前 n 行，如 LIMIT 10，返回前 10 行； LIMIT x, y，则从第 x 行后返回 y 行，如 LIMIT 10, 2，则会返回第11和12行； 常用来取固定名次的数据，或进行数据的初步查看 查询表格中的字段，并基于已有的字段进行计算； SELECT 处理函数 DISTINCT：去重，去重计数 COUNT(DISTINCT xx)； SQL 中的 DISTINCT 实际是删除操作，把重复的都删去； LIKE、%通配符、_占位符模糊查询； 聚合函数； CASE WHEN 条件判断函数； COALESCE()空值处理函数 OVER()窗口函数； SQL代码规范注释 单行注释：– 多行注释：/* 注释内容 */ 其他规范 SQL语句不区分大小写，因此 SELECT 与 select 甚至是 SeLect 的效果是相同的，但是要对命令和变量进行区分，所以默认命令需要大写，其他内容如变量等则需要小写 表和变量名中不要出现空格，可使用下划线_替代 查询语句中，使用单一空格隔开命令和变量 逗号写在字段前面 注意换行 核心语句的内容能写在一行尽量写在一行 WHERE 语句过长时，每个都要换行 注意缩进：CASE WHEN 同一级别的条件，子查询，别名尽量统一缩进，代码结束处加; 聚合函数聚合函数：有时候我们只是需要获取数据的汇总信息，比如行数、平均值，并不需要把所有数据都检索出来。为此，SQL提供了专门的函数，这也是SQL最强大功能之一。 SQL的聚合函数如下： 函数 说明 AVG() 返回某列的均值 COUNT() 返回某列的行数 MAX() 返回某列的最大值 MIN() 返回某列的最小值 SUM() 返回某列的和 子查询重要的是逻辑 子查询就是将一个查询（子查询）的结果，作为另一个查询（主查询）的数据来源或判断条件的查询。 常见的子查询有 WHERE 子查询，FROM 子查询，SELECT 子查询，EXISTS 子查询，子查询要用小括号 ()； 【好文详解】SQL中的子查询 如果感觉一次查询无法完成，就使用子查询，然后再逐步优化。 表连接脑海里一定要有两个具象化的表格 JOIN 【好文详解】SQL的各种连接JOIN详解 修改数据INSERT插入新记录 语法： 可以一次性添加多条记录，只需要在 VALUE 子句中指定多个记录值，每个记录值是由 (…) 包含的一组值。 廖雪峰：SQL教程-INSERT UPDATE更新已有记录 语法： 可以一次性更新多条记录，通过 WHERE 条件。 更新字段可以用表达式，比如亚洲的国家人口都加一百万（6个0）。 注意：UPDATE 语句中如果没有 WHERE 条件，那么，整个表的所有记录都会更新。 廖雪峰：SQL教程-UPDATE DELETE删除已有记录 语法： 可以一次性删除多条记录，通过 WHERE 条件。 注意：DELETE 语句中如果没有 WHERE 条件，那么，整个表的所有记录都会被删除。 廖雪峰：SQL教程-DELETE 相关链接 戴师兄3天SQL入门教程刷题链接 元旦3天SQL特训营 SQL学习总结 "},{"title":"力扣4.寻找两个正序数组的中位数","date":"2021-04-05T13:04:36.000Z","url":"/2021/04/05/lc4/","tags":[["algorithms & data structure; Java","/tags/algorithms-data-structure-Java/"]],"categories":[["LeetCode","/categories/LeetCode/"]],"content":"© 本文版权归作者Link 所有，转载请注明出处。 LeetCode | 4. 寻找两个正序数组的中位数 Median of Two Sorted Arrays 【hard】(Java代码) 二分查找法 迭代法 传送门 【做题直通车】leetcode 4：寻找两个正序数组的中位数 【BiliBili视频】leetcode 4 | 思路梳理 "},{"title":"Git设置ssh密钥","date":"2020-06-22T15:18:38.000Z","url":"/2020/06/22/setting-ssh-key/","tags":[["git","/tags/git/"]],"categories":[["wiki","/categories/wiki/"]],"content":"© 本文版权归作者Link 所有，若转载请注明出处，谢谢！ git 支持 https 和 git 两种传输协议： https 协议，每次pull, push都会提示要输入密码； git 协议，然后使用 ssh 密钥，这样免去每次都输密码的麻烦。 初次使用 git 的用户要使用 git 协议大概需要三个步骤： 生成密钥对 设置远程仓库（本文以github为例）上的公钥 把git的 remote url 修改为git协议 生成密钥对大多数 Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。 首先你要确认一下本机是否已经有一个公钥。 SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录。进去看看： 看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。 假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen来创建新的ssh key： 按Enter。 然后，会提示你输入密码，如下： (输一个，会安全一点，但是之后每次pull, push都会要求输入这个密码；若不输入，直接回车，就少了一点安全，但是省去了麻烦) 完成之后，大概是这样显示： 到此为止，本地的密钥对就生成了。 添加公钥到你的远程仓库（github） 查看刚刚生成的公钥： 登陆GitHub帐户, user settings -&gt; SSH and GPG keys -&gt; New SSH key 然后复制上面的公钥内容，粘贴进 Key 文本域内。 title 域，自己随便起个名字。 Add key。 验证下这个key是不是正常工作： 如果，看到： 说明设置成功了。 修改git的remote url使用命令 git remote -v查看你当前的 remote url： 如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议） 你可以登陆GitHub，在上面可以看到ssh协议相应的url，复制此ssh链接，然后使用命令git remote set-url来调整url： 然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。 the end. 更多链接 git配置公匙时不必输入密码 csdn的一篇文章，详细风趣地讲解了一个我曾犯过的错误。 git如何使用ssh密钥 博客园 superGG1990 的一篇文章，是一个很好的 walkthrough，我的这篇文章就是基于此文写的一个 summary。 "},{"title":"图床的使用","date":"2020-06-18T15:31:36.000Z","url":"/2020/06/18/picbed/","categories":[["wiki","/categories/wiki/"]],"content":"© 本文版权归作者Link 所有，若转载请注明出处，谢谢！ 在Typora中利用PicGo自动上传图片到SM.MS图床。 准备 install Typora，PicGo，Git，Node.js Typora PicGo Git Node.js register sm.ms PicGo 安装 sm.ms 插件 app 中插件设置搜索 smms-user，安装即可 picgo 的官方文档写得易懂详细，推荐阅读（PicGo-Doc）。 PicGo &amp; SM.MS目的是把图床（SM.MS）的 API Access 给 PicGo。 SM.MS中： ​ –&gt;dashboard ​ –&gt;API Token ​ click Generate Secret Token ​ copy Secret Token PicGo中： ​ –&gt;图床设置 ​ –&gt;SM.MS - 登录用户 ​ 将 Secret Token 输入 Auth框内 PicGo &amp; Typora目的是实现Typora中图片自动地通过 PicGo 上传到图床（SM.MS）。 Typora 中： ​ –&gt;文件 –&gt;偏好设置 –&gt;图像 ​ 图像中各种设置的说明易懂，按需勾选即可。 click 验证图片上传选项 ​ 会弹出下图：（现在可能不会成功上传，但现在不要紧） ​ copy 端口号。 PicGo 中： ​ –&gt;PicGo 设置 –&gt;设置 Server ​ 输入刚刚 copy 的端口号。 这时 Typora 中进行验证图片上传，就会成功，说明现在Typora中图片可以自动地通过 PicGo 上传到图床（SM.MS）了！ 可以拖一张图片到 Typora 中试验一下。 PicGo 快捷键 PicGo 支持快捷键command+shift+p（macOS）或者control+shift+p（windows\\linux）用以支持快捷上传剪贴板里的图片（第一张）。 支持自定义快捷键。 每次截图之后，按一下ctrl+shift+p，截图就可以直接上传到sm.ms图床上，并返回链接。 more PicGo-Doc 简书 各种错误排查 "},{"title":"Hello World","date":"2020-06-16T11:20:56.000Z","url":"/2020/06/16/hello-world/","categories":[[" ",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"categories","date":"2022-04-06T16:36:46.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"tags","date":"2022-04-06T16:35:46.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"search","date":"2022-04-06T16:11:22.000Z","url":"/search/index.html","categories":[[" ",""]]}]