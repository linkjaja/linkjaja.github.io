[{"title":"about-picture","date":"2022-05-19T14:02:04.000Z","url":"/2022/05/19/about-picture/","tags":[["blog","/tags/blog/"]],"categories":[["upload picture","/categories/upload-picture/"]],"content":"关于网站上的图片展示 准备 install Typora，PicGo，Git，Node.js register sm.ms PicGo 安装 sm.ms 插件 app 中插件设置搜索 smms-user，安装即可 picgo 的官方文档写得易懂详细，推荐阅读（PicGo-Doc）。 测试自定义小标题自定义正文 折叠摘要自定义正文 测试图片 "},{"title":"Git 向导","date":"2021-05-04T21:40:14.000Z","url":"/2021/05/05/git-guide/","tags":[["Git","/tags/Git/"]],"categories":[["Git","/categories/Git/"]],"content":"© 本文版权归作者Link 所有，转载请注明出处。 Git 是什么？Git 是一个分布式版本控制系统（Distributed Version Control System），客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 四个特点： 直接记录快照，而非差异比较； 近乎所有操作都是本地执行； Git 保证完整性； Git 一般只添加数据； Git 的工作流程 （Git - Workflow 来源：阮一峰的网络日志） 专业名词基本的 Git 工作流程： 在工作区（Workspace）中修改文件； 将更改选择性暂存至暂存区（Staging area&#x2F; Index）； 提交暂存区的内容到本地仓库（Repository）； Git 的三种状态，文件可能处于其一，假设这个文件是README.md，那么它为： modified：修改了文件，但修改仅在工作区； staged：将工作区已修改的文件放到了暂存区； committed：文件已经安全地保存到本地仓库。 配置 设置提交代码时的用户信息： 检查设定： 配置文件的路径： 本地仓库配置对应的配置文件路径 [–local] ： 用户全局配置对应的配置文件路径 [–global] ： 系统配置对应的配置文件路径[–system]： 新建代码库From existing data From existing repository注意：Git 克隆的是远程 Git 仓库的几乎所有数据，不仅仅是最新的版本。 本地变动 – git status列出哪些文件已被暂存、未被暂存、未被跟踪，即查看工作目录下的文件处于什么状态： 添加指定文件到暂存区，即将该文件放到暂存区（new file）： 也可以用上面的这条指令来暂存已被跟踪文件的最新修改（modified）； 如果对暂存后的文件再次进行修改，之后查询文件状态，那么这时，这个文件将会同时出现在 staging area 和 workspace，因为最新的修改还在工作区，没有暂存，而之前 git add 的版本被暂存了，如果这时提交，那么本地仓库的版本将会是最后一次 git add 的版本，不包含 workspace 中最新的修改。 本地变动 – git diff列出追踪但尚未暂存的文件更新了哪些部分，即工作区和暂存区的差异： 注意：git diff 不能显示自从上次提交的所有变化，它只能显示尚未暂存的变化。如果已经把所有修改的内容都暂存了，那么 git diff 不会有任何反馈。 列出已经暂存，但是没有提交到本地仓库的变化，即暂存区和上一个 commit 的差异： 列出工作区和上一个 commit 的差异（当前分支最新commit）： 列出两次 commit 之间的差异： 本地变动 – git add添加当前目录的所有文件到暂存区： 注意：如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。 对于同一个文件的多处变化，可以实现分次提交： 可以更好地利用 git commit 的注释功能，使仓库的版本颗粒度更高，可读性更好。 参考： stack overflow：Commit only part of a file in Git Git docs：git-add manpage 本地变动 – git rm删除工作区文件，并且将这次删除放入暂存区： 停止追踪指定文件，但该文件会保留在工作区： 比如删除添加.gitignore文件前错误提交的文件。 本地变动 – git mv移动文件，并将这个移动放入暂存区（也可以理解为文件改名）： 参考： Git docs：git-mv manpage 提交到本地仓库 – git commit提交暂存区到本地仓库： 也可以指定暂存区的文件提交到本地仓库，只要在 commit 后面指定 file。 跳过暂存区，直接将工作区自上次 commit 之后的变化，提交到本地仓库： 使用一次新的 commit，替代上一次提交： 重做上一次 commit，并包括指定文件的新变化： 参考： Git docs：git-commit manpage 提交到本地仓库 – git log列出当前分支的版本历史： 仅列出包含指定文件修改的 commit： 限制 log 的显示数量： 列出所有提交，每行显示一条 commit（仅显示提交的 hash 和 message）： 按提交者名字搜索并显示 commit： 按指定内容搜索并显示 commit： 显示图形化的 branch 信息： 参考： Git docs：git-log manpage 提交到本地仓库 – git reflog列出本地仓库的所有 commit： 提交到本地仓库 – git blame列出指定文件是什么人在什么时间修改过： 也可以具体查文档内部某一部分是谁修改： 参考： Git docs：git-blame manpage 远程仓库 – 拉取到本地拉取远程仓库的所有变动到本地，但不合并： 拉取远程仓库特定分支的更新到本地，不合并： 拉取远程仓库的所有变动到本地，之后自动与 HEAD 版本合并： 拉取远程仓库的所有变动到本地，并以 rebase 模式并入本地仓库： 列出当前配置的所有远程端： 如果远程仓库不止一个，那么就会全部列出，比如和多个协作者合作的，这样可以非常方便地拉取其他用户的贡献，还拥有向他们推送的权限。 显示某个远程端的信息： 增加一个新的远程仓库，并指定简写： 远程仓库 – 推送到远程上传本地指定分支到远程仓库： 注意：只有当有推送到该远程仓库的权限，及之前没有人推送过时，该命令才有效。如果有他人先推送到上游，那么，此时的推送命令就会被拒绝，必须先抓取他们的工作并将其合并到本地仓库，才能推送。 参考： Git book：remote branches 分支 – git branch列出本地仓库的所有分支： 列出所有远程分支： 列出所有本地分支和远程分支： 新建一个分支，但依然停留在当前分支： 新建一个分支，并切换到该分支： 新建一个分支，指向指定 commit： 新建一个分支，与指定的远程分支建立追踪关系： 建立追踪关系，在现有分支与指定的远程分支之间： 切换到指定分支，并更新工作区： 切换到上一个分支： 合并指定分支到当前分支： 选择一个 commit，合并进当前分支： 删除分支： 若该分支的修改尚未合并，那么用 -D 参数来强制删除分支，注意，该操作会丢失未合并的修改。 删除远程分支： 分支 – git rebase基于 base 对当前分支进行 rebase。base 可以是 commit、分支名称、tag 或者相对于 HEAD 的 commit。 参考： Git docs：git-rebase manpage B站视频：git-rebase 图解 回滚 – git revert新建一个 commit，用来撤销指定 commit，并且应用到当前分支： 回滚 – git checkout恢复暂存区的指定文件到工作区： 恢复某个 commit 的指定文件到暂存区和工作区： 恢复暂存区的所有文件到工作区： 回滚 – git reset重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变，即撤销这个文件上次的 git add： 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变： 重置暂存区与工作区，与上一次 commit 保持一致： 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致： 重置当前HEAD为指定 commit，但保持暂存区和工作区不变： 暂时将未提交的变化移除，稍后再移入： 回滚 – 具体场景场景1. 已经提交内容到本地仓库 如何回滚？ 场景2. 修改了还未提交到暂存区 怎么撤销？ 补充： 一种是该文件自修改后还没有放到暂存区，那么，现在撤销修改，就是回到和版本库一模一样的状态； 另一种是该文件添加到暂存区后，又做了修改，那么现在撤销修改，就是回到添加到暂存区后的状态； 场景3. 提交到暂存区，但还未提交到本地仓库 怎么办？ 把暂存区的修改撤销（unstage），重新放回工作区。 所以， git reset 既可以回退版本，也可以把暂存区的修改回退到工作区。 之后，丢弃工作区的修改即可。 标签列出所有标签： 给当前版本打标签： 给指定 commit 打标签： 删除本地标签： 删除远程标签： 提交指定标签： 提交所有标签： 新建一个分支，指向某个标签： Git 的 GUI 工具SourceTreeSourceTree 官网 IntelliJ IDEA 中的 GitIntelliJ IDEA 官方文档 相关链接 Pro Git book by Scott Chacon and Ben Straub. The book is available online for free at git-scm.com&#x2F;book. 常用 Git 命令清单：阮一峰的网络日志. Git Cheat Sheet: made by Hylke Bons. Git Cheat Sheet 中文版: translated by Gevin. "},{"title":"categories","date":"2022-04-06T16:36:46.000Z","url":"/categories/index.html","categories":[[" ",""]]},{"title":"tags","date":"2022-04-06T16:35:46.000Z","url":"/tags/index.html","categories":[[" ",""]]},{"title":"search","date":"2022-04-06T16:11:22.000Z","url":"/search/index.html","categories":[[" ",""]]}]